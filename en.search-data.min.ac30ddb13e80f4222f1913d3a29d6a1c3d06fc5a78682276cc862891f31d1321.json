[{"id":0,"href":"/SE-Labs/docs/else/works/","title":"往届作品","section":"Else","content":"往届作品 #  学习之余也可以点个 Star ~~   问卷星球 - 黄泽桓团队小学期作品（全组满分项目） 问卷星球 - 周勤团队小学期作品 史莱姆学术分享平台 - 史莱姆团队软工二项目  "},{"id":1,"href":"/SE-Labs/docs/else/ref/","title":"参考文献","section":"Else","content":"参考文献 #   Git 教程 - RUNOOB.COM Git - 管理项目和控制版本的工具  "},{"id":2,"href":"/SE-Labs/docs/labs/lab01/git/","title":"Git 简易教程","section":"Lab01 Git","content":"Git 指南 #  本教程涉及命令行指令说明时，[] 表示该参数为可选，\u0026lt;\u0026gt; 仅说明参数意义，需根据实际来定义  Git 简介 #  Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理或大或小的项目。利用 git，可以在本地很好地控制项目版本，让项目有条不紊地进行，编写代码错误还能通过回退进行纠正；通过提交、拉取、推送等操作，与队友或同事参与远程共同开发。\n分布式版本控制系统 在分布式版本控制系统中，系统保存的不是文件变化的差量，而是文件的快照，即把文件的整体复制下来保存，而不关心具体的变化内容。其次，最重要的是该控制系统是分布式的，开发者从中央服务器拷贝下来代码时，拷贝的是一个完整的版本库，包括历史纪录，提交记录等，这样即使某一台机器宕机也能找到文件的完整备份。\n   Git 安装 #  Windows 安装包下载地址：https://gitforwindows.org/\n官网慢，可以用国内的镜像：https://npm.taobao.org/mirrors/git-for-windows/\n完成安装之后，就可以在 cmd 或 powershell 等命令行工具使用 git 工具了。一般情况下，在某个文件夹点击右键，你可以看到 Git Bash Here，通过这个也可以打开 Git 工具。\nMacOS 在 Mac 平台上安装 Git 最容易的当属使用图形化的 Git 安装工具。\n下载地址为：http://sourceforge.net/projects/git-osx-installer/\nLinux 尝试在终端输入 git，看看系统有没有安装；没有的话输入以下命令安装：\nsudo apt-get install git  Git 配置 #  Git 提供了一个叫做 git config 的工具，用于配置或读取相应的工作环境变量。这些环境变量决定了 Git 在各个环节的管理员信息和使用方式，存放于 /etc/gitconfig (所有用户生效 –system) 或 ~/.gitconfig (当前用户配置 –global)。\n需要设置一下用户信息才能使用 Git 提交 commit，在终端输入：\ngit config --global user.name \u0026#34;yourname\u0026#34; git config --global user.email \u0026#34;youremail\u0026#34; Git 基本流程 #  创建仓库 #  首先在 Github/Gitee 平台创建仓库 (New a repositry)，克隆到本地：\ngit clone \u0026lt;remote_url\u0026gt; [local_dir_name] 或者在本地初始化仓库，并添加远程仓库链接：\ngit init # 初始化仓库 git remote add origin \u0026lt;remote_url\u0026gt; # 添加远程仓库，并命名为 origin（默认） 如果采用 clone 的方式，一定要 cd 进入到克隆下来的文件夹里，才能执行后续 Git 操作  修改提交 #  git add \u0026lt;file_name\u0026gt; # 将指定文件加入暂存区 git add . # 或使用.将项目所有文件加入暂存区（除.gitignore指定的文件外） git commit -m \u0026#34;\u0026lt;message\u0026gt;\u0026#34; # 将暂存区内容打包成commit，提交到本地仓库 git push # 将本地仓库内容提交到远程仓库 这样就实现了一次修改的提交和推送。\n工作区、暂存区和本地仓库  工作区：即当前进行工作的文件目录，文件修改但未提交，处于已修改状态（modified） 暂存区：运行git add命令后文件保存的区域，也就是下次提交要保存的文件，文件处于已暂存状态（staged） 本地仓库：即版本库，记录了提交的完整状态和内容，该区域文件处于已提交状态（committed）     同步远程仓库 #  在多人合作开发的情况下，需要定期 pull 仓库保持进度同步：\ngit pull [\u0026lt;remote_name\u0026gt; \u0026lt;remote_branch\u0026gt;[:\u0026lt;local_branch\u0026gt;]] 分支工作 #  在项目开发中，常常会建立两个分支：\n master/main：存储生产环境，可部署版本 dev：存储开发环境  当然，在多人开发中，也可能会为每个人建立分支，大家在各自分支上完成自己的开发任务。\ngit branch -l # 查看所有分支 git checkout \u0026lt;branch_name\u0026gt; # 切换到指定分支 git checkout -b \u0026lt;branch_name\u0026gt; # 根据当前分支，新建一个分支并切换到该分支上 git merge [\u0026lt;branch1\u0026gt;] \u0026lt;branch2\u0026gt; # 将branch2合并到branch1，省略branch1参数时表示合并到当前分支 当合并分支出现冲突时，也就是两个人分别在各自分支上修改了同一处，Git 无法自动合并，则会报错冲突。此时需要手动修改冲突文件，可选择保留哪一分支的内容，之后再 add/commit/push。\n错误回退 #  Git 多工作区和版本库机制，允许你回头是岸。\n如果发现提交了错误文件：\n 若文件未添加至暂存区：使用 git checkout \u0026lt;filename\u0026gt; 将文件替换成暂存区版本，或 git checkout . 将工作区内的所有文件替换成暂存区内的文件（谨慎使用） 若文件已添加到暂存区但未提交到本地仓库：使用 git reset HEAD . 撤销暂存区的所有修改至工作区，接下来就回到了上一步 若已提交到本地仓库：使用 git reset --hard HRAD^ 将所有文件回退至上一版本  本文仅介绍 Git 工作流程，具体指令见 Git 指令全集  "},{"id":3,"href":"/SE-Labs/docs/labs/lab01/git_command/","title":"Git 指令全集","section":"Lab01 Git","content":"Git 指令全集 #  仓库 #  # 在当前目录新建一个Git代码库 $ git init  # 新建一个目录，将其初始化为Git代码库 $ git init \u0026lt;project-name\u0026gt;  # 下载一个项目和它的整个代码历史 $ git clone \u0026lt;url\u0026gt; 配置 #  # 显示当前的Git配置 $ git config --list  # 编辑Git配置文件 $ git config -e \u0026lt;--global\u0026gt;  # 设置提交代码时的用户信息 $ git config \u0026lt;--global\u0026gt; user.name \u0026#34;\u0026lt;name\u0026gt;\u0026#34; $ git config \u0026lt;--global\u0026gt; user.email \u0026#34;\u0026lt;email address\u0026gt;\u0026#34; 增加/删除文件 #  # 添加指定文件到暂存区 $ git add \u0026lt;file1\u0026gt; \u0026lt;file2\u0026gt; ...  # 添加指定目录到暂存区，包括子目录 $ git add \u0026lt;dir\u0026gt;  # 添加当前目录的所有文件到暂存区 $ git add .  # 添加每个变化前，都会要求确认 # 对于同一个文件的多处变化，可以实现分次提交 $ git add -p  # 删除工作区文件，并且将这次删除放入暂存区 $ git rm \u0026lt;file1\u0026gt; \u0026lt;file2\u0026gt; ...  # 停止追踪指定文件，但该文件会保留在工作区 $ git rm --cached \u0026lt;file\u0026gt;  # 改名文件，并且将这个改名放入暂存区 $ git mv \u0026lt;file-original\u0026gt; \u0026lt;file-renamed\u0026gt; 代码提交 #  # 提交暂存区到仓库区 $ git commit -m \u0026lt;message\u0026gt;  # 提交暂存区的指定文件到仓库区 $ git commit \u0026lt;file1\u0026gt; \u0026lt;file2\u0026gt; ... -m \u0026lt;message\u0026gt;  # 提交工作区自上次commit之后的变化，直接到仓库区 $ git commit -a  # 提交时显示所有diff信息 $ git commit -v  # 使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息 $ git commit --amend -m \u0026lt;message\u0026gt;  # 重做上一次commit，并包括指定文件的新变化 $ git commit --amend \u0026lt;file1\u0026gt; \u0026lt;file2\u0026gt; ... 分支 #  # 列出所有本地分支 $ git branch  # 列出所有远程分支 $ git branch -r  # 列出所有本地分支和远程分支 $ git branch -a  # 新建一个分支，但依然停留在当前分支 $ git branch \u0026lt;branch-name\u0026gt;  # 新建一个分支，并切换到该分支 $ git checkout -b \u0026lt;branch\u0026gt;  # 新建一个分支，与远程分支同步，并切换到该分支 $ git checkout -b \u0026lt;branch\u0026gt; \u0026lt;remote-branch\u0026gt;  # 新建一个分支，指向指定commit $ git branch \u0026lt;branch\u0026gt; \u0026lt;commit\u0026gt;  # 新建一个分支，与指定的远程分支建立追踪关系 $ git branch --track \u0026lt;branch\u0026gt; \u0026lt;remote-branch\u0026gt;  # 切换到指定分支，并更新工作区 $ git checkout \u0026lt;branch-name\u0026gt;  # 切换到上一个分支 $ git checkout -  # 建立追踪关系，在现有分支与指定的远程分支之间 $ git branch --set-upstream-to=origin/\u0026lt;branch\u0026gt; \u0026lt;branch\u0026gt;  # 合并指定分支到当前分支 $ git merge \u0026lt;branch\u0026gt;  # 选择一个commit，合并进当前分支 $ git cherry-pick \u0026lt;commit\u0026gt;  # 删除分支 $ git branch -d \u0026lt;branch-name\u0026gt;  # 删除远程分支 $ git push origin --delete \u0026lt;branch-name\u0026gt; $ git branch -dr \u0026lt;remote/branch\u0026gt; 标签 #  # 列出所有tag $ git tag  # 新建一个tag在当前commit $ git tag \u0026lt;tag\u0026gt;  # 新建一个tag在指定commit $ git tag \u0026lt;tag\u0026gt; \u0026lt;commit\u0026gt;  # 删除本地tag $ git tag -d \u0026lt;tag\u0026gt;  # 删除远程tag $ git push origin :refs/tags/\u0026lt;tagName\u0026gt;  # 查看tag信息 $ git show \u0026lt;tag\u0026gt;  # 提交指定tag $ git push \u0026lt;remote\u0026gt; \u0026lt;tag\u0026gt;  # 提交所有tag $ git push \u0026lt;remote\u0026gt; --tags  # 新建一个分支，指向某个tag $ git checkout -b \u0026lt;branch\u0026gt; \u0026lt;tag\u0026gt; 查看信息 #  # 显示有变更的文件 $ git status  # 显示当前分支的版本历史 $ git log  # 显示commit历史，以及每次commit发生变更的文件 $ git log --stat  # 搜索提交历史，根据关键词 $ git log -S \u0026lt;keyword\u0026gt;  # 显示某个commit之后的所有变动，每个commit占据一行 $ git log \u0026lt;tag\u0026gt; HEAD --pretty=format:%s  # 显示某个commit之后的所有变动，其\u0026#34;提交说明\u0026#34;必须符合搜索条件 $ git log \u0026lt;tag\u0026gt; HEAD --grep feature  # 显示某个文件的版本历史，包括文件改名 $ git log --follow \u0026lt;file\u0026gt; $ git whatchanged \u0026lt;file\u0026gt;  # 显示指定文件相关的每一次diff $ git log -p \u0026lt;file\u0026gt;  # 显示过去5次提交 $ git log -5 --pretty --oneline  # 显示所有提交过的用户，按提交次数排序 $ git shortlog -sn  # 显示指定文件是什么人在什么时间修改过 $ git blame \u0026lt;file\u0026gt;  # 显示暂存区和工作区的差异 $ git diff  # 显示暂存区和上一个commit的差异 $ git diff --cached \u0026lt;file\u0026gt;  # 显示工作区与当前分支最新commit之间的差异 $ git diff HEAD  # 显示两次提交之间的差异 $ git diff \u0026lt;first-branch\u0026gt;...\u0026lt;second-branch\u0026gt;  # 显示今天你写了多少行代码 $ git diff --shortstat \u0026#34;@{0 day ago}\u0026#34;  # 显示某次提交的元数据和内容变化 $ git show \u0026lt;commit\u0026gt;  # 显示某次提交发生变化的文件 $ git show --name-only \u0026lt;commit\u0026gt;  # 显示某次提交时，某个文件的内容 $ git show \u0026lt;commit\u0026gt;:\u0026lt;filename\u0026gt;  # 显示当前分支的最近几次提交 $ git reflog 远程同步 #  # 下载远程仓库的所有变动 $ git fetch \u0026lt;remote\u0026gt;  # 显示所有远程仓库 $ git remote -v  # 显示某个远程仓库的信息 $ git remote show \u0026lt;remote\u0026gt;  # 增加一个新的远程仓库，并命名 $ git remote add \u0026lt;shortname\u0026gt; \u0026lt;url\u0026gt;  # 取回远程仓库的变化，并与本地分支合并 $ git pull \u0026lt;remote\u0026gt; \u0026lt;branch\u0026gt;  # 上传本地指定分支到远程仓库 $ git push \u0026lt;remote\u0026gt; \u0026lt;branch\u0026gt;  # 强行推送当前分支到远程仓库，即使有冲突 $ git push \u0026lt;remote\u0026gt; --force  # 推送所有分支到远程仓库 $ git push \u0026lt;remote\u0026gt; --all 撤销 #  # 恢复暂存区的指定文件到工作区 $ git checkout \u0026lt;file\u0026gt;  # 恢复某个commit的指定文件到暂存区和工作区 $ git checkout \u0026lt;commit\u0026gt; \u0026lt;file\u0026gt;  # 恢复暂存区的所有文件到工作区 $ git checkout .  # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 $ git reset \u0026lt;file\u0026gt;  # 重置暂存区与工作区，与上一次commit保持一致 $ git reset --hard  # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 $ git reset \u0026lt;commit\u0026gt;  # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 $ git reset --hard \u0026lt;commit\u0026gt;  # 重置当前HEAD为指定commit，但保持暂存区和工作区不变 $ git reset --keep \u0026lt;commit\u0026gt;  # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支 $ git revert \u0026lt;commit\u0026gt;  # 暂时将未提交的变化移除，稍后再移入 $ git stash $ git stash pop "},{"id":4,"href":"/SE-Labs/docs/labs/lab01/","title":"Lab01 Git","section":"Labs","content":"Lab01 Git #  实验目的 #   了解分布式版本控制系统的概念 掌握 Git 的基本指令 实践团队如何使用 Git 进行合作开发 实践分支合并时冲突的解决  资源链接 #  https://bhpan.buaa.edu.cn:443/link/2B8C3DF0CE32D21908D8007C843940A5\nValid Until: 2022-08-01 23:59\n实验指南 #   观看上述云盘链接中 Lab01 的视频 文字教程可查阅 Git简易教程 和 Git指令全集 完成实验作业并于 3.20 日晚 12 点前提交至 软院云平台  实验作业 #  远程仓库可选 Gitee 或 Github；操作过程中请保存好截图，根据后面所讲的提交方式打包提交。  任务一 个人作业 #    远程仓库上新建代码仓库（private），仓库名：Platform-学号。\n在仓库主页截图\n  远程仓库上以 master/main 分支为基础，新建 dev 分支，添加 index.html 文件。（master/main 分支存储生产环境，dev 分支存储开发环境）\n在dev分支主页截图\n  clone 远程仓库到本地，创建本地 dev 分支与远程同步。（此处结果应为在本地 dev 分支看到 index.html 文件）\n在控制台和本地目录截图\n  在本地修改 index.html 文件（内容如下），上传本地改动到远程仓库。\n控制台命令、仓库主页查看 index.html 截图 index.html 文件修改内容 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,initial-scale=1.0,user-scalable=no,viewport-fit=cover\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;keywords\u0026quot; content=\u0026quot;北航软件工程基础\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Lab01 任务一\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Lab01 任务一\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;      在远程修改 index.html 文件（内容如下），本地同步远程改动。\n本地查看 index.html 内容截图 index.html 文件修改内容 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,initial-scale=1.0,user-scalable=no,viewport-fit=cover\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;keywords\u0026quot; content=\u0026quot;北航软件工程基础\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Lab01 任务一\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Lab01 任务一\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;姓名\u0026lt;/h2\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;      在本地合并 dev 分支到 master/main 分支，提交本地改动到远程仓库，并在远程 master/main 查看 index.html 内容。（以上结果是本地和远程的 master、dev 分支都可以看到 index.html 的最新改动）\n在网页 master/main 分支查看 index.html 内容并截图\n  任务二 小组作业 #  请保留任务二所创建的仓库一周；\n任务二小组共同完成一份文档，文档模板见所给云盘资源 Lab01。\n 初始创建与同步 #    组长在远程仓库上新建 public 代码仓库，仓库名：Study-组号，并为组员授权。\n仓库主页截图、仓库授权用户截图\n  远程仓库上以 master/main 分支为基础，创建 dev 分支，添加 main.py 文件。\n  各小组成员 clone 远程仓库到本地，创建本地 dev 分支与远程同步。\n  合并分支练习 #   组长在远程仓库以 dev 分支为基础，为各个组员（包括自己）创建 exercise-学号 分支，各组员创建本地 exercise-学号 分支，同步远程代码仓库，在本地 exercise-学号 分支添加 function_学号.py 文件（各组员在自己的分支修改），上传本地改动至远程仓库。\n各组员本地 Git 命令行截图和远程仓库各分支文件内容截图\nfunction_学号.py 文件修改内容 print('My student_id: 学号')      各组员在本地将 exercise-学号 合并到 dev 分支。\n  上传到远程仓库 dev 分支。\n远程仓库 dev 分支截图\n  合并分支冲突 #   各组员同步远程 dev 分支更新，确保此时内容为最新内容。\n  各组员修改本地 exercise-学号 分支的 main.py 文件。\nmain.py 文件修改内容 import os os.system('python function_学号.py')      各组员在本地将 exercise-学号 分支合并到 dev 分支。\n各组员 Git 命令截图\n  等所有组员结束上一步骤后，先组长再组员依次上传到远程 dev 分支，冲突时一律保留组长的修改。（解决冲突执行 commit 时注明信息为 conflict solved）\n各组员 Git 命令截图和处理冲突截图\n  执行第10步骤时，当其他人 push 后你无法直接 push（当然你可以先尝试 push 看有无警告），需要 pull 同步他人修改后才能 push，而此时 pull 下来后你就会发现有冲突了  完成发布 #   待第10步骤完成后，组长在本地同步仓库 dev 分支，合并到 master/main 分支，并上传到远程 master/main 分支。\n组长 Git 命令截图和仓库主页 master/main 分支的 main.py 文件内容\n  提交方式 #   截止时间：2022/3/20 晚12点 提交方式：软院云平台 提交内容：两个 word 文档或 pdf 文档，放在压缩包内，命名格式如下  学号_姓名_第1次实验.zip |-- 学号_姓名_第1次实验_任务1.docx/pdf `-- 学号_姓名_第1次实验_任务2.docx/pdf 注意事项 #   文档中必须包括各步骤说明以及相关截图。 commit 时要求说清楚更改的内容。 任务二小组共同完成一份文档，组长和组员都需提交，文档模板见所给云盘资源 Lab01。   "},{"id":5,"href":"/SE-Labs/docs/labs/lab02/","title":"Lab02 前后端基础Ⅰ","section":"Labs","content":"Lab02 前后端基础 #  "},{"id":6,"href":"/SE-Labs/docs/labs/lab03/","title":"Lab03 前后端基础Ⅱ","section":"Labs","content":"Lab02 前后端基础 #  "},{"id":7,"href":"/SE-Labs/docs/labs/lab04/","title":"Lab04 项目管理与数据库建模","section":"Labs","content":"Lab04 项目管理与数据库建模 #  "},{"id":8,"href":"/SE-Labs/docs/labs/lab05/","title":"Lab05 UML图的绘制","section":"Labs","content":"Lab05 UML图的绘制 #  "},{"id":9,"href":"/SE-Labs/docs/labs/lab06/","title":"Lab06 项目部署","section":"Labs","content":"Lab06 项目部署 #  "},{"id":10,"href":"/SE-Labs/docs/labs/lab03/vuebook/","title":"Vuebook","section":"Lab03 前后端基础Ⅱ","content":"Vuebook #  点击跳转链接：https://super-buaa-2021.github.io/Vuebook/\nGet Vuebook  "}]